Једнодимензионални низови
=========================

Шта ћеш научити?

Научићеш: 

- шта је секвенцијално а шта бинарно претраживање низа
- како да пронађеш елемент како у уређеном тако и неуређеном низу 
- како да уредиш низ од најмањег ка највећем елементу и обрнито
- како да помериш елементе за одређен број места у лево односно у десно
- како да обрнеш елементе низа 
- како да избациш одређени елемент са жељене позиције
- како да убациш елемент на жељену позицију

Потребно за овај курс

Развојно окружење Dev C/C++, Code Blocks ili Visual Studio Code sa C/C++ или окружење на Петљи

1.1. Увод
---------

На почетку хајде да се подсетимо шта смо у Програмирању 1 научили о низовима. Са знањем које сте
стекли у Програмирању 1 пробајте да решите следећи квиз 

.. mchoice:: mchoice_q1
    :answer_a: Низ је основни тип података који се састоји од више података истог типа.
    :answer_b: Низ је сложени тип података који се састоји од више података различитог типа
    :answer_c: Низ је основни тип података који се састоји од једног податка.
    :answer_d: Низ је сложени тип података који се састоји од више података истог типа
    :feedback_a: Нетачно.
    :feedback_b: Нетачно.
    :feedback_c: Нетачно.
    :feedback_d: Низ је сложени тип података који се састоји од елемената који морају бити истог типа.
    :correct: d

    Који од понуђених дефиниција дефинишу низ:


.. mchoice:: mchoice_q2
    :multiple_answers:
    :answer_a: int a[10]={1,2,3};
    :answer_b: int a[5]={-3, -2, -1, 0, 1, 2, 3};
    :answer_c: int a[]={10,20,30,40,50};
    :answer_d: int[5] a={1, 2, 3, 4, 5};
    :answer_e: int a[5]={'1', '2', '3', '4', '5'};
    :feedback_a: Одговор је исправан јер смо резервисали више простора него што имамо елемената. 
    :feedback_b: Одговор није исправан јер смо резервисали мање простора него што имамо елемената. 
    :feedback_c: Одговор је исправан јер се број резервисаних  места дефинише бројем елемената у витичастој загради.
    :feedback_d: Одговор није исправан јер број резервисаних места у угластој загради је на погрешном месту. 
    :feedback_e: Одговор је исправан јер се су у ствари карактери у С језику подаци целобројног типа.
    :correct: a, c, e

    Дате су наредбе за декларисање и иницијализацију једнодомензионалног низа (доделу почетних вредности ) целих бројева у програмском језику Ц. Шта мислите које су наредбе исправно написане а које не. Пробајте да образложите зашто су неисправе поједине наредбе.

Из предходно наведеног закљујемо:

- На почетку морамо резервисати довољно простора за све елементе низа при дефинисању низа
- Низ се мора састојати од елемената истог типа (простих или изведених)
- Број елемената низа у угластим заградама може се изоставити само приликом доделе почетних вредности (иницијализације) када број елемената у витичастој загради дефинишу број елемената низа.

Поставља се питање шта се дешава ако резервишемо више места него што имамо унетих елемената.
У том случају се преостала места попуњавају нулама.

Пробајте да напишете следећи код:

.. code:: c

    #include<stdio.h>
    main()
    {
        int a[5]={1,2,3},i;
        for (i=0;i<5;i++)
        {
            printf("a[%d]=%d\n",i,a[i]);
        }
    }

Након извршавања програма на излазу ћемо добити:

.. code:: c

    a[0]=1
    a[1]=2
    a[2]=3
    a[3]=0
    a[4]=0

Видимо да су прва три елемента односно индекси 0,1,2 добили вредности из доделе а последња два
елемента односно индекси 3 и 4 вредности 0.

Шта можемо још да закључимо. У С језику као и у већини програмских језика индекс низа почиње
од 0. Тако да је први елемент има индекс 0 а рецимо трећи елеменат индекс 2. 

Обратите пажњу често се у задацима каже "елемент на позицији.." а не "индекс елемента.." што
суштински мења како поставку тако ирешење задатка.

Хајде сада да видимо шта све можемо да урадимо са низом.

Можемо да: 

- тражимо елемент у низу
- уредимо низ (од најмањег ка највећем елементу и обрнуто)
- ротирамо елементе низа (померамо за одређен број места улево или удесно)
- инертујемо низ (обрнемо редослед елемената)
- сажмемо низ (избацимо жељени елемент)
- проширимо низ (убацимо жељени елемент)

Цео курс ћемо радити са низовима који садрже целе бројеве. Хајде да кренемо редом.
